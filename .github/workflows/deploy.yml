name: Build and Deploy

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:  # Manual trigger

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: hello-world
  WEBAPP_DIR: webapp  # Define webapp directory

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./webapp  # Point to webapp directory
        file: ./webapp/Dockerfile  # Specify Dockerfile path
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name webapp-cluster --region ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-tools/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Deploy to Kubernetes
      run: |
        cd webapp/k8s/overlays/staging  # Change to webapp k8s directory
        export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        kustomize edit set image hello-world=$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:develop-${{ github.sha }}
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/hello-world -n hello-world-staging --timeout=5m

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=hello-world -n hello-world-staging --timeout=300s
        SERVICE_IP=$(kubectl get svc hello-world-service -n hello-world-staging -o jsonpath='{.spec.clusterIP}')
        kubectl run curl-test --image=curlimages/curl:latest --rm -i --restart=Never -- \
          curl -f http://$SERVICE_IP/health || exit 1

  deploy-production:
    name: Deploy to Production
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name webapp-cluster --region ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-tools/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Deploy to Kubernetes
      run: |
        cd webapp/k8s/overlays/production  # Change to webapp k8s directory
        export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        kustomize edit set image hello-world=$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:main-${{ github.sha }}
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/hello-world -n hello-world-production --timeout=10m

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=hello-world -n hello-world-production --timeout=300s
        SERVICE_IP=$(kubectl get svc hello-world-service -n hello-world-production -o jsonpath='{.spec.clusterIP}')
        kubectl run curl-test --image=curlimages/curl:latest --rm -i --restart=Never -- \
          curl -f http://$SERVICE_IP/health || exit 1

    - name: Create deployment annotation
      run: |
        kubectl annotate deployment hello-world -n hello-world-production \
          kubernetes.io/change-cause="Deployed version ${{ github.sha }} by GitHub Actions"